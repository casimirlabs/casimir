{
  "version": 3,
  "sources": ["../../../node_modules/@ledgerhq/errors/src/helpers.ts", "../../../node_modules/@ledgerhq/errors/src/index.ts", "../../../node_modules/@ledgerhq/hw-transport/src/Transport.ts", "../src/index.ts"],
  "sourcesContent": ["/* eslint-disable no-continue */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n\nconst errorClasses = {};\nconst deserializers = {};\n\nexport const addCustomErrorDeserializer = (\n  name: string,\n  deserializer: (obj: any) => any\n): void => {\n  deserializers[name] = deserializer;\n};\n\nexport interface LedgerErrorConstructor<F extends { [key: string]: unknown }>\n  extends ErrorConstructor {\n  new (message?: string, fields?: F, options?: any): Error;\n  (message?: string, fields?: F, options?: any): Error;\n  readonly prototype: Error;\n}\n\nexport const createCustomErrorClass = <\n  F extends { [key: string]: unknown },\n  T extends LedgerErrorConstructor<F>\n>(\n  name: string\n): T => {\n  class CustomErrorClass extends Error {\n    cause?: Error;\n    constructor(message?: string, fields?: F, options?: any) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      super(message || name, options);\n      // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, CustomErrorClass.prototype);\n      this.name = name;\n      if (fields) {\n        for (const k in fields) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          this[k] = fields[k];\n        }\n      }\n      if (\n        options &&\n        isObject(options) &&\n        \"cause\" in options &&\n        !(\"cause\" in this)\n      ) {\n        // .cause was specified but the superconstructor\n        // did not create an instance property.\n        const cause = options.cause;\n        this.cause = cause;\n        if (\"stack\" in cause) {\n          this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n        }\n      }\n    }\n  }\n\n  errorClasses[name] = CustomErrorClass;\n\n  return CustomErrorClass as unknown as T;\n};\n\nfunction isObject(value) {\n  return typeof value === \"object\";\n}\n\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object: any): Error | undefined => {\n  if (object && typeof object === \"object\") {\n    try {\n      if (typeof object.message === \"string\") {\n        const msg = JSON.parse(object.message);\n        if (msg.message && msg.name) {\n          object = msg;\n        }\n      }\n    } catch (e) {\n      // nothing\n    }\n\n    let error;\n    if (typeof object.name === \"string\") {\n      const { name } = object;\n      const des = deserializers[name];\n      if (des) {\n        error = des(object);\n      } else {\n        let constructor = name === \"Error\" ? Error : errorClasses[name];\n\n        if (!constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          constructor = createCustomErrorClass(name);\n        }\n\n        error = Object.create(constructor.prototype);\n        try {\n          for (const prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {\n          // sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      if (typeof object.message === \"string\") {\n        error = new Error(object.message);\n      }\n    }\n\n    if (error && !error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n    return error;\n  }\n  return new Error(String(object));\n};\n\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (\n  value: undefined | To | string | (() => unknown)\n): undefined | To | string => {\n  if (!value) return value;\n  if (typeof value === \"object\") {\n    return destroyCircular(value, []);\n  }\n  if (typeof value === \"function\") {\n    return `[Function: ${value.name || \"anonymous\"}]`;\n  }\n  return value;\n};\n\ninterface To {\n  name?: string;\n  message?: string;\n  stack?: string;\n}\n\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from: To, seen: Array<To>): To {\n  const to: To = {};\n  seen.push(from);\n  for (const key of Object.keys(from)) {\n    const value = from[key];\n    if (typeof value === \"function\") {\n      continue;\n    }\n    if (!value || typeof value !== \"object\") {\n      to[key] = value;\n      continue;\n    }\n    if (seen.indexOf(from[key]) === -1) {\n      to[key] = destroyCircular(from[key], seen.slice(0));\n      continue;\n    }\n    to[key] = \"[Circular]\";\n  }\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n  return to;\n}\n", "import {\n  serializeError,\n  deserializeError,\n  createCustomErrorClass,\n  addCustomErrorDeserializer,\n  LedgerErrorConstructor,\n} from \"./helpers\";\n\nexport {\n  serializeError,\n  deserializeError,\n  createCustomErrorClass,\n  addCustomErrorDeserializer,\n};\n\nexport const AccountNameRequiredError = createCustomErrorClass(\n  \"AccountNameRequired\"\n);\nexport const AccountNotSupported = createCustomErrorClass(\n  \"AccountNotSupported\"\n);\nexport const AmountRequired = createCustomErrorClass(\"AmountRequired\");\nexport const BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\nexport const BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\nexport const CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\nexport const CashAddrNotSupported = createCustomErrorClass(\n  \"CashAddrNotSupported\"\n);\nexport const CurrencyNotSupported = createCustomErrorClass<\n  { currencyName: string },\n  LedgerErrorConstructor<{ currencyName: string }>\n>(\"CurrencyNotSupported\");\nexport const DeviceAppVerifyNotSupported = createCustomErrorClass(\n  \"DeviceAppVerifyNotSupported\"\n);\nexport const DeviceGenuineSocketEarlyClose = createCustomErrorClass(\n  \"DeviceGenuineSocketEarlyClose\"\n);\nexport const DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\nexport const DeviceOnDashboardExpected = createCustomErrorClass(\n  \"DeviceOnDashboardExpected\"\n);\nexport const DeviceOnDashboardUnexpected = createCustomErrorClass(\n  \"DeviceOnDashboardUnexpected\"\n);\nexport const DeviceInOSUExpected = createCustomErrorClass(\n  \"DeviceInOSUExpected\"\n);\nexport const DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\nexport const DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\nexport const DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\nexport const DeviceSocketNoBulkStatus = createCustomErrorClass(\n  \"DeviceSocketNoBulkStatus\"\n);\nexport const LockedDeviceError = createCustomErrorClass(\"LockedDeviceError\");\nexport const DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\nexport const DisconnectedDeviceDuringOperation = createCustomErrorClass(\n  \"DisconnectedDeviceDuringOperation\"\n);\nexport const DeviceExtractOnboardingStateError = createCustomErrorClass(\n  \"DeviceExtractOnboardingStateError\"\n);\nexport const DeviceOnboardingStatePollingError = createCustomErrorClass(\n  \"DeviceOnboardingStatePollingError\"\n);\nexport const EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\nexport const EthAppPleaseEnableContractData = createCustomErrorClass(\n  \"EthAppPleaseEnableContractData\"\n);\nexport const FeeEstimationFailed = createCustomErrorClass(\n  \"FeeEstimationFailed\"\n);\nexport const FirmwareNotRecognized = createCustomErrorClass(\n  \"FirmwareNotRecognized\"\n);\nexport const HardResetFail = createCustomErrorClass(\"HardResetFail\");\nexport const InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\nexport const InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\nexport const InvalidAddressBecauseDestinationIsAlsoSource =\n  createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\nexport const LatestMCUInstalledError = createCustomErrorClass(\n  \"LatestMCUInstalledError\"\n);\nexport const UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\nexport const LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\nexport const LedgerAPIErrorWithMessage = createCustomErrorClass(\n  \"LedgerAPIErrorWithMessage\"\n);\nexport const LedgerAPINotAvailable = createCustomErrorClass(\n  \"LedgerAPINotAvailable\"\n);\nexport const ManagerAppAlreadyInstalledError = createCustomErrorClass(\n  \"ManagerAppAlreadyInstalled\"\n);\nexport const ManagerAppRelyOnBTCError = createCustomErrorClass(\n  \"ManagerAppRelyOnBTC\"\n);\nexport const ManagerAppDepInstallRequired = createCustomErrorClass(\n  \"ManagerAppDepInstallRequired\"\n);\nexport const ManagerAppDepUninstallRequired = createCustomErrorClass(\n  \"ManagerAppDepUninstallRequired\"\n);\nexport const ManagerDeviceLockedError = createCustomErrorClass(\n  \"ManagerDeviceLocked\"\n);\nexport const ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\n  \"ManagerFirmwareNotEnoughSpace\"\n);\nexport const ManagerNotEnoughSpaceError = createCustomErrorClass(\n  \"ManagerNotEnoughSpace\"\n);\nexport const ManagerUninstallBTCDep = createCustomErrorClass(\n  \"ManagerUninstallBTCDep\"\n);\nexport const NetworkDown = createCustomErrorClass(\"NetworkDown\");\nexport const NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\nexport const NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\nexport const NotEnoughBalanceToDelegate = createCustomErrorClass(\n  \"NotEnoughBalanceToDelegate\"\n);\nexport const NotEnoughBalanceInParentAccount = createCustomErrorClass(\n  \"NotEnoughBalanceInParentAccount\"\n);\nexport const NotEnoughSpendableBalance = createCustomErrorClass(\n  \"NotEnoughSpendableBalance\"\n);\nexport const NotEnoughBalanceBecauseDestinationNotCreated =\n  createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\nexport const NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\nexport const NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\nexport const NotSupportedLegacyAddress = createCustomErrorClass(\n  \"NotSupportedLegacyAddress\"\n);\nexport const GasLessThanEstimate = createCustomErrorClass(\n  \"GasLessThanEstimate\"\n);\nexport const PriorityFeeTooLow = createCustomErrorClass(\"PriorityFeeTooLow\");\nexport const PriorityFeeTooHigh = createCustomErrorClass(\"PriorityFeeTooHigh\");\nexport const PriorityFeeHigherThanMaxFee = createCustomErrorClass(\n  \"PriorityFeeHigherThanMaxFee\"\n);\nexport const MaxFeeTooLow = createCustomErrorClass(\"MaxFeeTooLow\");\nexport const PasswordsDontMatchError =\n  createCustomErrorClass(\"PasswordsDontMatch\");\nexport const PasswordIncorrectError =\n  createCustomErrorClass(\"PasswordIncorrect\");\nexport const RecommendSubAccountsToEmpty = createCustomErrorClass(\n  \"RecommendSubAccountsToEmpty\"\n);\nexport const RecommendUndelegation = createCustomErrorClass(\n  \"RecommendUndelegation\"\n);\nexport const TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\nexport const UnexpectedBootloader = createCustomErrorClass(\n  \"UnexpectedBootloader\"\n);\nexport const MCUNotGenuineToDashboard = createCustomErrorClass(\n  \"MCUNotGenuineToDashboard\"\n);\nexport const RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\nexport const UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\n  \"UnavailableTezosOriginatedAccountReceive\"\n);\nexport const UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\n  \"UnavailableTezosOriginatedAccountSend\"\n);\nexport const UpdateFetchFileFail = createCustomErrorClass(\n  \"UpdateFetchFileFail\"\n);\nexport const UpdateIncorrectHash = createCustomErrorClass(\n  \"UpdateIncorrectHash\"\n);\nexport const UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\nexport const UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\nexport const UserRefusedDeviceNameChange = createCustomErrorClass(\n  \"UserRefusedDeviceNameChange\"\n);\nexport const UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\nexport const UserRefusedFirmwareUpdate = createCustomErrorClass(\n  \"UserRefusedFirmwareUpdate\"\n);\nexport const UserRefusedAllowManager = createCustomErrorClass(\n  \"UserRefusedAllowManager\"\n);\nexport const UserRefusedOnDevice = createCustomErrorClass(\n  \"UserRefusedOnDevice\"\n); // TODO rename because it's just for transaction refusal\nexport const TransportOpenUserCancelled = createCustomErrorClass(\n  \"TransportOpenUserCancelled\"\n);\nexport const TransportInterfaceNotAvailable = createCustomErrorClass(\n  \"TransportInterfaceNotAvailable\"\n);\nexport const TransportRaceCondition = createCustomErrorClass(\n  \"TransportRaceCondition\"\n);\nexport const TransportWebUSBGestureRequired = createCustomErrorClass(\n  \"TransportWebUSBGestureRequired\"\n);\nexport const DeviceShouldStayInApp = createCustomErrorClass(\n  \"DeviceShouldStayInApp\"\n);\nexport const WebsocketConnectionError = createCustomErrorClass(\n  \"WebsocketConnectionError\"\n);\nexport const WebsocketConnectionFailed = createCustomErrorClass(\n  \"WebsocketConnectionFailed\"\n);\nexport const WrongDeviceForAccount = createCustomErrorClass(\n  \"WrongDeviceForAccount\"\n);\nexport const WrongAppForCurrency = createCustomErrorClass(\n  \"WrongAppForCurrency\"\n);\nexport const ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\nexport const CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\nexport const FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\nexport const FeeRequired = createCustomErrorClass(\"FeeRequired\");\nexport const FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\nexport const DustLimit = createCustomErrorClass(\"DustLimit\");\nexport const PendingOperation = createCustomErrorClass(\"PendingOperation\");\nexport const SyncError = createCustomErrorClass(\"SyncError\");\nexport const PairingFailed = createCustomErrorClass(\"PairingFailed\");\nexport const GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\nexport const LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\nexport const LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\nexport const FirmwareOrAppUpdateRequired = createCustomErrorClass(\n  \"FirmwareOrAppUpdateRequired\"\n);\n\nexport const LanguageNotFound = createCustomErrorClass(\"LanguageNotFound\");\n\n// db stuff, no need to translate\nexport const NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\nexport const DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\nexport const DBNotReset = createCustomErrorClass(\"DBNotReset\");\n\n/**\n * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport\n */\nexport enum HwTransportErrorType {\n  Unknown = 0,\n  BleLocationServicesDisabled = 1,\n  BleBluetoothUnauthorized = 2,\n  BleScanStartFailed = 3,\n}\n\n/**\n * Represents an error coming from any Transport implementation.\n *\n * Needed to map a specific implementation error into an error that\n * can be managed by any code unaware of the specific Transport implementation\n * that was used.\n */\nexport class HwTransportError extends Error {\n  type: HwTransportErrorType;\n\n  constructor(type: HwTransportErrorType, message: string) {\n    super(message);\n    this.name = \"HwTransportError\";\n    this.type = type;\n\n    // Needed as long as we target < ES6\n    Object.setPrototypeOf(this, HwTransportError.prototype);\n  }\n}\n\n/**\n * TransportError is used for any generic transport errors.\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\n */\nexport class TransportError extends Error {\n  id: string;\n  constructor(message: string, id: string) {\n    const name = \"TransportError\";\n    super(message || name);\n    this.name = name;\n    this.message = message;\n    this.stack = new Error().stack;\n    this.id = id;\n  }\n}\n\naddCustomErrorDeserializer(\n  \"TransportError\",\n  (e) => new TransportError(e.message, e.id)\n);\n\nexport const StatusCodes = {\n  ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\n  ALGORITHM_NOT_SUPPORTED: 0x9484,\n  CLA_NOT_SUPPORTED: 0x6e00,\n  CODE_BLOCKED: 0x9840,\n  CODE_NOT_INITIALIZED: 0x9802,\n  COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\n  CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\n  CONTRADICTION_INVALIDATION: 0x9810,\n  CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\n  CUSTOM_IMAGE_BOOTLOADER: 0x662f,\n  CUSTOM_IMAGE_EMPTY: 0x662e,\n  FILE_ALREADY_EXISTS: 0x6a89,\n  FILE_NOT_FOUND: 0x9404,\n  GP_AUTH_FAILED: 0x6300,\n  HALTED: 0x6faa,\n  INCONSISTENT_FILE: 0x9408,\n  INCORRECT_DATA: 0x6a80,\n  INCORRECT_LENGTH: 0x6700,\n  INCORRECT_P1_P2: 0x6b00,\n  INS_NOT_SUPPORTED: 0x6d00,\n  INVALID_KCV: 0x9485,\n  INVALID_OFFSET: 0x9402,\n  LICENSING: 0x6f42,\n  LOCKED_DEVICE: 0x5515,\n  MAX_VALUE_REACHED: 0x9850,\n  MEMORY_PROBLEM: 0x9240,\n  MISSING_CRITICAL_PARAMETER: 0x6800,\n  NO_EF_SELECTED: 0x9400,\n  NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\n  OK: 0x9000,\n  PIN_REMAINING_ATTEMPTS: 0x63c0,\n  REFERENCED_DATA_NOT_FOUND: 0x6a88,\n  SECURITY_STATUS_NOT_SATISFIED: 0x6982,\n  TECHNICAL_PROBLEM: 0x6f00,\n  UNKNOWN_APDU: 0x6d02,\n  USER_REFUSED_ON_DEVICE: 0x5501,\n};\n\nexport function getAltStatusMessage(code: number): string | undefined | null {\n  switch (code) {\n    // improve text of most common errors\n    case 0x6700:\n      return \"Incorrect length\";\n    case 0x6800:\n      return \"Missing critical parameter\";\n    case 0x6982:\n      return \"Security not satisfied (dongle locked or have invalid access rights)\";\n    case 0x6985:\n      return \"Condition of use not satisfied (denied by the user?)\";\n    case 0x6a80:\n      return \"Invalid data received\";\n    case 0x6b00:\n      return \"Invalid parameter received\";\n    case 0x5515:\n      return \"Locked device\";\n  }\n  if (0x6f00 <= code && code <= 0x6fff) {\n    return \"Internal error, please report\";\n  }\n}\n\n/**\n * Error thrown when a device returned a non success status.\n * the error.statusCode is one of the `StatusCodes` exported by this library.\n */\nexport function TransportStatusError(statusCode: number): void {\n  const statusText =\n    Object.keys(StatusCodes).find((k) => StatusCodes[k] === statusCode) ||\n    \"UNKNOWN_ERROR\";\n  const smsg = getAltStatusMessage(statusCode) || statusText;\n  const statusCodeStr = statusCode.toString(16);\n  const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;\n\n  // Maps to a LockedDeviceError\n  if (statusCode === StatusCodes.LOCKED_DEVICE) {\n    throw new LockedDeviceError(message);\n  }\n\n  this.name = \"TransportStatusError\";\n  this.message = message;\n  this.stack = new Error().stack;\n  this.statusCode = statusCode;\n  this.statusText = statusText;\n}\nTransportStatusError.prototype = new Error();\n\naddCustomErrorDeserializer(\n  \"TransportStatusError\",\n  (e) => new TransportStatusError(e.statusCode)\n);\n", "import EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = {\n  unsubscribe: () => void;\n};\n\n/**\n */\nexport type Device = any; // Should be a union type of all possible Device object's shape\n\nexport type DescriptorEventType = \"add\" | \"remove\";\n/**\n * A \"descriptor\" is a parameter that is specific to the implementation, and can be an ID, file path, or URL.\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport interface DescriptorEvent<Descriptor> {\n  type: DescriptorEventType;\n  descriptor: Descriptor;\n  deviceModel?: DeviceModel | null | undefined;\n  device?: Device;\n}\n\n/**\n * Observer generic type, following the Observer pattern\n */\nexport type Observer<EventType, EventError = unknown> = Readonly<{\n  next: (event: EventType) => unknown;\n  error: (e: EventError) => unknown;\n  complete: () => unknown;\n}>;\n\n/**\n * The Transport class defines a generic interface for communicating with a Ledger hardware wallet.\n * There are different kind of transports based on the technology (channels like U2F, HID, Bluetooth, Webusb) and environment (Node, Web,...).\n * It is an abstract class that needs to be implemented.\n */\nexport default class Transport {\n  exchangeTimeout = 30000;\n  unresponsiveTimeout = 15000;\n  deviceModel: DeviceModel | null | undefined = null;\n\n  /**\n   * Check if the transport is supported on the current platform/browser.\n   * @returns {Promise<boolean>} A promise that resolves with a boolean indicating support.\n   */\n  static readonly isSupported: () => Promise<boolean>;\n\n  /**\n   * List all available descriptors for the transport.\n   * For a better granularity, checkout `listen()`.\n   *\n   * @returns {Promise<Array<any>>} A promise that resolves with an array of descriptors.\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static readonly list: () => Promise<Array<any>>;\n\n  /**\n   * Listen for device events for the transport. The method takes an observer of DescriptorEvent and returns a Subscription.\n   * A DescriptorEvent is an object containing a \"descriptor\" and a \"type\" field. The \"type\" field can be \"add\" or \"remove\", and the \"descriptor\" field can be passed to the \"open\" method.\n   * The \"listen\" method will first emit all currently connected devices and then will emit events as they occur, such as when a USB device is plugged in or a Bluetooth device becomes discoverable.\n   * @param {Observer<DescriptorEvent<any>>} observer - An object with \"next\", \"error\", and \"complete\" functions, following the observer pattern.\n   * @returns {Subscription} A Subscription object on which you can call \".unsubscribe()\" to stop listening to descriptors.\n   * @example\n  const sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n  })\n   */\n  static readonly listen: (\n    observer: Observer<DescriptorEvent<any>>\n  ) => Subscription;\n\n  /**\n   * Attempt to create a Transport instance with a specific descriptor.\n   * @param {any} descriptor - The descriptor to open the transport with.\n   * @param {number} timeout - An optional timeout for the transport connection.\n   * @returns {Promise<Transport>} A promise that resolves with a Transport instance.\n   * @example\n  TransportFoo.open(descriptor).then(transport => ...)\n   */\n  static readonly open: (\n    descriptor?: any,\n    timeout?: number\n  ) => Promise<Transport>;\n\n  /**\n   * Send data to the device using a low level API.\n   * It's recommended to use the \"send\" method for a higher level API.\n   * @param {Buffer} apdu - The data to send.\n   * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * Send apdus in batch to the device using a low level API.\n   * The default implementation is to call exchange for each apdu.\n   * @param {Array<Buffer>} apdus - array of apdus to send.\n   * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.\n   * @returns {Subscription} A Subscription object on which you can call \".unsubscribe()\" to stop sending apdus.\n   */\n  exchangeBulk(apdus: Buffer[], observer: Observer<Buffer>): Subscription {\n    let unsubscribed = false;\n    const unsubscribe = () => {\n      unsubscribed = true;\n    };\n\n    const main = async () => {\n      if (unsubscribed) return;\n      for (const apdu of apdus) {\n        const r = await this.exchange(apdu);\n        if (unsubscribed) return;\n        const status = r.readUInt16BE(r.length - 2);\n        if (status !== StatusCodes.OK) {\n          throw new TransportStatusError(status);\n        }\n        observer.next(r);\n      }\n    };\n\n    main().then(\n      () => !unsubscribed && observer.complete(),\n      (e) => !unsubscribed && observer.error(e)\n    );\n\n    return { unsubscribe };\n  }\n\n  /**\n   * Set the \"scramble key\" for the next data exchanges with the device.\n   * Each app can have a different scramble key and it is set internally during instantiation.\n   * @param {string} key - The scramble key to set.\n   * @deprecated This method is no longer needed for modern transports and should be migrated away from.\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * Close the connection with the device.\n   * @returns {Promise<void>} A promise that resolves when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen for an event on the transport instance.\n   * Transport implementations may have specific events. Common events include:\n   * \"disconnect\" : triggered when the transport is disconnected.\n   * @param {string} eventName - The name of the event to listen for.\n   * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.\n   */\n  on(eventName: string, cb: (...args: Array<any>) => any): void {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: (...args: Array<any>) => any): void {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: any): void {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number): void {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number): void {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * Send data to the device using the higher level API.\n   * @param {number} cla - The instruction class for the command.\n   * @param {number} ins - The instruction code for the command.\n   * @param {number} p1 - The first parameter for the instruction.\n   * @param {number} p2 - The second parameter for the instruction.\n   * @param {Buffer} data - The data to be sent. Defaults to an empty buffer.\n   * @param {Array<number>} statusList - A list of acceptable status codes for the response. Defaults to [StatusCodes.OK].\n   * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout = 3000,\n    listenTimeout?: number\n  ): Promise<Transport> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: Promise<void> | null | undefined;\n  exchangeAtomicImpl = async (\n    f: () => Promise<Buffer | void>\n  ): Promise<Buffer | void> => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n\n    let resolveBusy;\n    const busyPromise: Promise<void> = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n\n    try {\n      const res = await f();\n\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Record<string, any>,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (const methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock: string | null = null;\n\n  decorateAppAPIMethod<R, A extends any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: any,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n", "import Transport from '@ledgerhq/hw-transport'\n\n/**\n * Speculos TCP transport implementation\n *\n * @example\n * import TransportSpeculosHTTP from \"@casimir/speculos-transport\"\n * const transport = await TransportSpeculosHTTP.create()\n * const res = await transport.send(0xE0, 0x01, 0, 0)\n */\nexport default class TransportSpeculosHTTP extends Transport {\n  baseURL: string\n  eventStream!: EventSource\n\n  constructor(baseURL: string) {\n    super()\n    this.baseURL = baseURL\n  }\n\n  static isSupported = (): Promise<boolean> => Promise.resolve(true)\n  // this transport is not discoverable\n  static list = (): Promise<never[]> => Promise.resolve([])\n  static listen = () => ({\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    unsubscribe: () => {},\n  })\n\n  static open = async (\n    baseURL?: string\n  ): Promise<TransportSpeculosHTTP> => {\n    try {\n      baseURL = baseURL || 'http://127.0.0.1:5000'\n      const transport = new TransportSpeculosHTTP(baseURL)\n      const eventSource = new EventSource(`${baseURL}/events?stream=true`)\n      // eventSource.addEventListener('open', (event: Event) => console.warn('Ledger', event.type), false)\n      // eventSource.addEventListener('error', (event: Event) => console.warn('Ledger', event.type, eventSource.readyState), false)\n      // eventSource.addEventListener('message', (message: MessageEvent) => console.warn('Ledger', message.type, message.data), false)\n      transport.eventStream = eventSource\n      return transport\n    } catch (error) {\n      console.log(error)\n      throw error\n    }\n  }\n\n  /**\n   * Press and release button\n   * buttons available: left, right, both\n   * @param {*} but\n   */\n  button = async (but: string): Promise<void> => {\n    const action = { action: 'press-and-release' }\n    await fetch(`${this.baseURL}/button/${but}`, { method: 'POST', body: JSON.stringify(action) })\n  }\n\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    const hex = apdu.toString('hex')\n    const response = await fetch(`${this.baseURL}/apdu`, { method: 'POST', body: JSON.stringify({ data: hex }) })\n    const json = await response.json()\n    const { data } = json\n    return Buffer.from(data, 'hex')\n  }\n\n  async close() {\n    // close event stream\n    this.eventStream.close()\n    return Promise.resolve()\n  }\n}\n"],
  "mappings": "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",
  "names": ["errorClasses", "deserializers", "addCustomErrorDeserializer", "name", "deserializer", "exports", "createCustomErrorClass", "CustomErrorClass", "_super", "__extends", "message", "fields", "options", "_this", "k", "isObject", "cause", "value", "deserializeError", "object", "msg", "error", "name_1", "des", "constructor", "prop", "serializeError", "destroyCircular", "from", "seen", "to", "_b", "__values", "_c", "key", "helpers_1", "exports", "HwTransportErrorType", "HwTransportError", "_super", "__extends", "type", "message", "_this", "TransportError", "id", "name", "e", "getAltStatusMessage", "code", "TransportStatusError", "statusCode", "statusText", "k", "smsg", "statusCodeStr", "events_1", "__importDefault", "errors_1", "exports", "Transport", "_this", "cla", "ins", "p1", "p2", "data", "statusList", "response", "_a", "sw", "s", "f", "__awaiter", "busyPromise", "r", "resolveBusy", "unresponsiveReached", "timeout", "res", "_apdu", "apdus", "observer", "unsubscribed", "unsubscribe", "main", "apdus_1", "__values", "apdus_1_1", "apdu", "_b", "status_1", "e", "_key", "eventName", "cb", "event", "args", "_i", "__spreadArray", "__read", "exchangeTimeout", "unresponsiveTimeout", "openTimeout", "listenTimeout", "resolve", "reject", "found", "sub", "listenTimeoutId", "self", "methods", "scrambleKey", "methods_1", "methods_1_1", "methodName", "ctx", "_appAPIlock", "src_exports", "__export", "TransportSpeculosHTTP", "__toCommonJS", "import_hw_transport", "_TransportSpeculosHTTP", "Transport", "baseURL", "but", "action", "apdu", "hex", "json", "data", "TransportSpeculosHTTP", "__publicField", "transport", "eventSource", "error"]
}
